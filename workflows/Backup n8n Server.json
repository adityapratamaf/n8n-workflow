{
  "active": false,
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large1": {
      "main": [
        [],
        [
          {
            "node": "Merge Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items1": {
      "main": [
        [
          {
            "node": "isDiffOrNew1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew1": {
      "main": [
        [
          {
            "node": "Check Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file1": {
      "main": [
        [
          {
            "node": "Return1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file1": {
      "main": [
        [
          {
            "node": "Return1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Globals1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "n8n1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data1": {
      "main": [
        [
          {
            "node": "If file too large1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals1": {
      "main": [
        [
          {
            "node": "Get file data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status1": {
      "main": [
        [
          {
            "node": "Return1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit existing file1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-20T22:38:31.284Z",
  "id": "j9NKUfVDLkRDmiJc",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Backup n8n Server",
  "nodes": [
    {
      "parameters": {},
      "id": "1467d3fe-db39-444f-a383-bcdab27a2df4",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -1968,
        128
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "7b41adcb-896c-4cc9-bda8-be6e85333241",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -1760,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "YxEn5l2lbugxP4EY",
          "name": "n8n account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "130a4f66-9618-47d3-a91d-a073c8ab4524",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        224,
        224
      ],
      "typeVersion": 3.3,
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "daa7aae9-73a0-4bdd-9e61-5cbd2b98d6e2",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        -880,
        80
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {},
      "id": "8df8990b-e278-4231-8389-8e3f74f48bb5",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        -656,
        144
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"update\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"update\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "f1061cc9-83c6-45bf-9714-992b465d9477",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        -432,
        144
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{ $('Loop Over Items').item.json.name.replace(\".\", \"\") }}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "=id workflow : {{ $('Loop Over Items').item.json.id }} ({{$json.github_status}})"
      },
      "id": "9ca40895-c7cc-490b-a7f3-91465368858c",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        0,
        304
      ],
      "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "ZXXvS9ijO9ruygED",
          "name": "GitHub account 3"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{ $('Loop Over Items').item.json.name.replace(\".\", \"\") }}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "=id workflow : {{ $('Loop Over Items').item.json.id }} ({{$json.github_status}})"
      },
      "id": "2f011327-86fe-44fb-9334-5cba507f1c3d",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        0,
        0
      ],
      "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "KVOWrijEUPKOkkLW",
          "name": "GitHub account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0f4410d4-11c2-4272-b2e8-0d685bad10cf",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -1536,
        224
      ],
      "typeVersion": 3,
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6
            }
          ]
        }
      },
      "id": "c0914c65-20c3-4d48-88ed-b7c7f7c20931",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -1968,
        320
      ],
      "typeVersion": 1.2,
      "disabled": true
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('n8n').item.json.name.replace(\".\", \"\") }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "50126b5f-40b9-48e8-a224-0eda7d0c1c51",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        -1088,
        80
      ],
      "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "TrwBXAiUbjPU83LY",
          "name": "GitHub account"
        }
      },
      "disabled": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "adityapratamaf"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-workflow"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "bf9b4eff-c1ac-4017-aba3-fc7f40630e0b",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        -1312,
        80
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.github_status }}",
                    "rightValue": "same",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9a7c500c-2a97-41f0-9063-7a40903eb203"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "same"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f93abd57-5138-4930-9c78-81e547f8c55c",
                    "leftValue": "={{ $json.github_status }}",
                    "rightValue": "update",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "update"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd4e7c56-a75f-4557-84f6-abb494335adc",
                    "leftValue": "={{ $json.github_status }}",
                    "rightValue": "new",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "new"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -208,
        144
      ],
      "id": "4dec16d5-7a64-424d-8c51-9b54013ea61a",
      "name": "Check Status",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Ubah node ini",
        "height": 208,
        "width": 192,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1360,
        16
      ],
      "typeVersion": 1,
      "id": "5adaa2eb-91be-4e8d-a577-ade3b45863eb",
      "name": "Sticky Note",
      "disabled": true
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "374f92f8-54f6-4b38-b022-094cf7f9d242",
      "name": "n8n1",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -2976,
        992
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "YxEn5l2lbugxP4EY",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "68b57d9c-abb3-429e-9e0b-5539d8402be6",
      "name": "Return1",
      "type": "n8n-nodes-base.set",
      "position": [
        -992,
        992
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "4b1ad025-3b88-475b-b04a-871714b90d89",
      "name": "If file too large1",
      "type": "n8n-nodes-base.if",
      "position": [
        -2096,
        848
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "c7d8db0c-1b9b-40be-821f-b16f9a6d35ec",
      "name": "Merge Items1",
      "type": "n8n-nodes-base.merge",
      "position": [
        -1872,
        912
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"update\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"update\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "d49194cb-5176-4e42-a90d-454dfcc1ccc0",
      "name": "isDiffOrNew1",
      "type": "n8n-nodes-base.code",
      "position": [
        -1648,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals1').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals1').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals1').item.json.repo.path }}{{ $('Loop Over Items1').item.json.name.replace(\".\", \"\") }}.json",
        "fileContent": "={{$('isDiffOrNew1').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "=id workflow : {{ $('Loop Over Items1').item.json.id }} ({{$json.github_status}})"
      },
      "id": "78722c34-ba0f-43bd-bd74-cbfc815632ac",
      "name": "Create new file1",
      "type": "n8n-nodes-base.github",
      "position": [
        -1216,
        1072
      ],
      "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "TrwBXAiUbjPU83LY",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals1').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals1').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals1').item.json.repo.path }}{{ $('Loop Over Items1').item.json.name.replace(\".\", \"\") }}.json",
        "fileContent": "={{$('isDiffOrNew1').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "=id workflow : {{ $('Loop Over Items1').item.json.id }} ({{$json.github_status}})"
      },
      "id": "ebae5cb6-493b-4f87-a71a-b82cfd1f043b",
      "name": "Edit existing file1",
      "type": "n8n-nodes-base.github",
      "position": [
        -1216,
        768
      ],
      "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "TrwBXAiUbjPU83LY",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "50cd4097-2a12-4c63-ae67-0916cd1dcdf8",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -2752,
        992
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6
            }
          ]
        }
      },
      "id": "b1388b67-418a-4a4a-bf05-953b5f5870b5",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3184,
        1088
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('n8n1').item.json.name.replace(\".\", \"\") }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "fe5d195f-f4a0-4bd3-a14f-9d7214da3f83",
      "name": "Get file data1",
      "type": "n8n-nodes-base.github",
      "position": [
        -2304,
        848
      ],
      "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "TrwBXAiUbjPU83LY",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "salmanfaris06"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-workflow"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "257ddf08-ebe9-480e-ab21-07ee2882215e",
      "name": "Globals1",
      "type": "n8n-nodes-base.set",
      "position": [
        -2528,
        848
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.github_status }}",
                    "rightValue": "same",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9a7c500c-2a97-41f0-9063-7a40903eb203"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "same"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f93abd57-5138-4930-9c78-81e547f8c55c",
                    "leftValue": "={{ $json.github_status }}",
                    "rightValue": "update",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "update"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd4e7c56-a75f-4557-84f6-abb494335adc",
                    "leftValue": "={{ $json.github_status }}",
                    "rightValue": "new",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "new"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1424,
        912
      ],
      "id": "4c2a8556-3c91-4030-90d4-a9a786c2d6ef",
      "name": "Check Status1"
    },
    {
      "parameters": {
        "content": "## Ubah node ini",
        "height": 208,
        "width": 192,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2576,
        784
      ],
      "typeVersion": 1,
      "id": "c73cfe57-181e-49b3-bf97-56a9d9ecca8c",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Jakarta",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "shared": [
    {
      "createdAt": "2025-09-20T22:38:31.289Z",
      "updatedAt": "2025-09-20T22:38:31.289Z",
      "role": "workflow:owner",
      "workflowId": "j9NKUfVDLkRDmiJc",
      "projectId": "OvJ502o4d8UTml2X"
    }
  ],
  "staticData": {
    "node:Schedule Trigger1": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-20T23:00:25.000Z",
  "versionId": "0c8f390e-c663-430c-99d8-8a731befe782"
}